name: "LeNet for MNIST 2 Dilated MNIST adaptation"

# -----------------------------------------------------------------------------
# ----------------------------------------------------------------- Data layers
# -----------------------------------------------------------------------------

# ----------------------------------------------------------------------- MNIST
# Train phase
layers {
  name: "mnist"
  type: DATA
  top: "source_data"
  top: "lp_labels"
  data_param {
    source: "examples/mnist_adaptation/mnist_train_lmdb"
    backend: LMDB
    batch_size: 64
  }
  transform_param {
    scale: 0.00390625
  }
  include: { phase: TRAIN }
}
layers {
  name: "mnist_domain_labels"
  type: DUMMY_DATA
  top: "source_domain_labels"
  dummy_data_param {
    data_filler {
      type: "constant"
      value: 0
    }
    num: 64
    channels: 1
    height: 1
    width: 1
  }
  include: { phase: TRAIN }
}

# --------------------------------------------------------------- Dilated MNIST
# Train phase
layers {
  name: "dilated_mnist"
  type: DATA
  top: "target_data"
  data_param {
    source: "examples/mnist_adaptation/dilated_mnist_train_lmdb"
    backend: LMDB
    batch_size: 64
  }
  transform_param {
    scale: 0.00390625
  }
  include: { phase: TRAIN }
}
layers {
  name: "dilated_mnist_domain_labels"
  type: DUMMY_DATA
  top: "target_domain_labels"
  dummy_data_param {
    data_filler {
      type: "constant"
      value: 1
    }
    num: 64
    channels: 1
    height: 1
    width: 1
  }
  include: { phase: TRAIN }
}
# Test phase
layers {
  name: "dilated_mnist"
  type: DATA
  top: "data"
  top: "lp_labels"
  data_param {
    source: "examples/mnist_adaptation/dilated_mnist_test_lmdb"
    backend: LMDB
    batch_size: 100
  }
  transform_param {
    scale: 0.00390625
  }
  include: { phase: TEST }
}
layers {
  name: "dilated_mnist_domain_labels"
  type: DUMMY_DATA
  top: "dc_labels"
  dummy_data_param {
    data_filler {
      type: "constant"
      value: 1
    }
    num: 100
    channels: 1
    height: 1
    width: 1
  }
  include: { phase: TEST }
}

# ---------------------------------------------------------- Data concatenation
layers {
  name: "concat_data"
  type: CONCAT
  bottom: "source_data"
  bottom: "target_data"
  top: "data"
  concat_param {
    concat_dim: 0
  }
  include: { phase: TRAIN }
}
layers {
  name: "concat_domain_labels"
  type: CONCAT
  bottom: "source_domain_labels"
  bottom: "target_domain_labels"
  top: "dc_labels"
  concat_param {
    concat_dim: 0
  }
  include: { phase: TRAIN }
}

# ----------------------------------------------------------------------------
# ---------------------------------------------------------- Feature extractor
# ----------------------------------------------------------------------------
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "pool1"
  top: "conv2"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 48
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# -----------------------------------------------------------------------------
# ------------------------------------------------------------- Label predictor
# -----------------------------------------------------------------------------

# ------------------------------------------------------ Exclude target samples
layers {
  name: "slice_features"
  type: SLICE
  bottom: "pool2"
  top: "source_features"
  top: "target_features"
  slice_param {
    slice_dim: 0
  }
  include: { phase: TRAIN }
}
layers {
  name: "kill_target_features"
  type: SILENCE
  bottom: "target_features"
  include: { phase: TRAIN }
}
layers {
  name: "pool2_alias"
  type: SPLIT
  bottom: "pool2"
  top: "source_features"
  include: { phase: TEST }
}

# -------------------------------------------------------------------- Classify
layers {
  name: "lp_ip1"
  type: INNER_PRODUCT
  bottom: "source_features"
  top: "lp_ip1"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "lp_relu1"
  type: RELU
  bottom: "lp_ip1"
  top: "lp_ip1"
}
layers {
  name: "lp_ip2"
  type: INNER_PRODUCT
  bottom: "lp_ip1"
  top: "lp_ip2"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "lp_relu2"
  type: RELU
  bottom: "lp_ip2"
  top: "lp_ip2"
}
layers {
  name: "lp_ip3"
  type: INNER_PRODUCT
  bottom: "lp_ip2"
  top: "lp_ip3"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.3
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "lp_accuracy"
  type: ACCURACY
  bottom: "lp_ip3"
  bottom: "lp_labels"
  top: "lp_accuracy"
  include: { phase: TEST }
}
layers {
  name: "lp_loss"
  type: SOFTMAX_LOSS
  bottom: "lp_ip3"
  bottom: "lp_labels"
  top: "lp_loss"
  loss_weight: 2.0
}

# -----------------------------------------------------------------------------
# ----------------------------------------------------------- Gradient reversal
# -----------------------------------------------------------------------------
layers {
  name: "grl"
  type: GRADIENT_SCALER
  bottom: "pool2"
  top: "grl"
  gradient_scaler_param {
    lower_bound: 0.3
    upper_bound: 1.0
    alpha: 10.0
    max_iter: 10000
  }
}

# -----------------------------------------------------------------------------
# ----------------------------------------------------------- Domain classifier
# -----------------------------------------------------------------------------
layers {
  name: "dc_ip1"
  type: INNER_PRODUCT
  bottom: "grl"
  top: "dc_ip1"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.3
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "dc_relu1"
  type: RELU
  bottom: "dc_ip1"
  top: "dc_ip1"
}
layers {
  name: "dc_ip2"
  type: INNER_PRODUCT
  bottom: "dc_ip1"
  top: "dc_ip2"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "gaussian"
      std: 0.3
    }
    bias_filler {
      type: "constant"
    }
  }
}
# layers {
#   name: "dc_sigmoid"
#   type: SIGMOID
#   bottom: "dc_ip2"
#   top: "dc_probs"
#   include: { phase: TEST }
# }
# layers {
#   name: "dc_threshold"
#   type: THRESHOLD
#   bottom: "dc_probs"
#   top: "dc_preds"
#   threshold_param {
#     threshold: 0.5
#   }
#   include: { phase: TEST }
# }
# layers {
#   name: "dc_accuracy"
#   type: ACCURACY
#   bottom: "dc_preds"
#   bottom: "dc_labels"
#   top: "dc_accuracy"
#   include: { phase: TEST }
# }
layers {
  name: "dc_loss"
  type: SIGMOID_CROSS_ENTROPY_LOSS
  bottom: "dc_ip2"
  bottom: "dc_labels"
  top: "dc_loss"
  loss_weight: 0.1
}
